public class Int {
    public static void main(String[] args) {
        //溢出
        int x = 2147483640;
        int y = 15;
        int sum = x + y;
        System.out.println(sum);//-2147483641
        long l = (long)x +(long) y;//转换类型，解决！
        System.out.println(l);

        //移位运算
        //左移
        int n = 7;       // 00000000 00000000 00000000 00000111 = 7
        int a = n << 1;  // 00000000 00000000 00000000 00001110 = 14
        int b = n << 2;  // 00000000 00000000 00000000 00011100 = 28
        int c = n << 28; // 01110000 00000000 00000000 00000000 = 1879048192
        int d = n << 29; // 11100000 00000000 00000000 00000000 = -536870912（最高位变成了1）
        //右移
        int n1 = 7;       // 00000000 00000000 00000000 00000111 = 7
        int a1 = n >> 1;  // 00000000 00000000 00000000 00000011 = 3
        int b1 = n >> 2;  // 00000000 00000000 00000000 00000001 = 1
        int c1 = n >> 3;  // 00000000 00000000 00000000 00000000 = 0
        //负数右移
        int n2 = -536870912;
        int a2 = n >> 1;  // 11110000 00000000 00000000 00000000 = -268435456
        int b2 = n >> 2;  // 11111000 00000000 00000000 00000000 = -134217728
        int c2 = n >> 28; // 11111111 11111111 11111111 11111110 = -2
        int d2 = n >> 29; // 11111111 11111111 11111111 11111111 = -1
        //无符号右移运算：使用>>>，它的特点是不管符号位，右移后高位总是补0
        int n3 = -536870912;
        int a3 = n >>> 1;  // 01110000 00000000 00000000 00000000 = 1879048192
        int b3 = n >>> 2;  // 00111000 00000000 00000000 00000000 = 939524096
        int c3 = n >>> 29; // 00000000 00000000 00000000 00000111 = 7
        int d3 = n >>> 31; // 00000000 00000000 00000000 00000001 = 1
        //仔细观察可发现，左移实际上就是不断地×2，右移实际上就是不断地÷2。

        //位运算
        //与运算：必须两个数同时为1，结果才为1
        int n4 = 0 & 0; // 0
        n4 = 0 & 1; // 0
        n4 = 1 & 0; // 0
        n4 = 1 & 1; // 1
        //或运算：只要任意一个为1，结果就为1
        int n5 = 0 | 0; // 0
        n5 = 0 | 1; // 1
        n5 = 1 | 0; // 1
        n5 = 1 | 1; // 1
        //非运算：0和1互换
        int n6 = ~0; // 1
        n6 = ~1; // 0
        //异或运算：如果两个数不同，结果为1，否则为0
        int n7 = 0 ^ 0; // 0
        n7 = 0 ^ 1; // 1
        n7 = 1 ^ 0; // 1
        n7 = 1 ^ 1; // 0





    }



}
